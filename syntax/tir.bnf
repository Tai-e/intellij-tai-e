{
  parserClass="pascal.taie.intellij.tir.syntax.TirParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tir"
  psiImplClassSuffix="Impl"
  psiPackage="pascal.taie.intellij.tir.syntax.psi"
  psiImplPackage="pascal.taie.intellij.tir.syntax.psi.impl"

  elementTypeHolderClass="pascal.taie.intellij.tir.syntax.TirTypes"
  elementTypeClass="pascal.taie.intellij.tir.syntax.TirElementType"
  tokenTypeClass="pascal.taie.intellij.tir.syntax.TirTokenType"

  psiImplUtilClass="pascal.taie.intellij.tir.syntax.TirPsiUtil"
}

tir_file ::= class_def

class_def ::= modifier_class* (CLASS | INTERFACE) identifier_class class_extends? class_implements? class_body

class_extends ::= EXTENDS identifier_class (COMMA identifier_class)*

class_implements ::= IMPLEMENTS identifier_class (COMMA identifier_class)*

class_body ::= LBRACE class_member* RBRACE

class_member ::= field_def | method_def | COMMENT

// Field def
field_def ::= modifier_field* identifier_type identifier_field_list SEMICOLON
// ---

// Method def
method_def ::= method_sig (method_body | SEMICOLON)

method_sig ::= modifier_method* identifier_type identifier_method LPAREN (identifier_type IDENTIFIER (COMMA identifier_type IDENTIFIER)*)? RPAREN

method_body ::= LBRACE (method_body_var | method_body_line | method_body_catch)+ RBRACE

method_body_var ::= identifier_type identifier_variable (COMMA identifier_variable)* SEMICOLON

method_body_line ::= LINE_NUMBER method_body_stmt SEMICOLON

method_body_catch ::= TRY LBRACKET INTEGER COMMA INTEGER RPAREN COMMA CATCH identifier_variable AT INTEGER

// copy stmts and more
method_body_stmt ::= lvalue EQUAL rvalue
                   | identifier_variable EQUAL NEW identifier_type
                   | identifier_variable EQUAL NEW_ARRAY identifier_type LBRACKET identifier_variable RBRACKET
                   | identifier_variable EQUAL NEW_MULTI_ARRAY identifier_type (LBRACKET identifier_variable? RBRACKET)+
                   | invoke_expr
                   | THROW identifier_type
                   | CATCH identifier_variable
                   | LOOKUP_SWITCH LPAREN identifier_variable RPAREN LBRACE switch_branch (COMMA switch_branch)* RBRACE
                   | IF LPAREN (unary_expr | binary_expr | IDENTIFIER) RPAREN GOTO INTEGER
                   | GOTO INTEGER
                   | (MONITOR_ENTER | MONITOR_EXIT) identifier_variable
                   | RETURN identifier_variable?
                   | NOP

switch_branch ::= (INTEGER | LONG | STRING_LITERAL | DEFAULT) RIGHT_ARROW INTEGER

lvalue ::= identifier_variable DOT field_sig
         | identifier_variable LBRACKET identifier_variable RBRACKET
         | identifier_variable
         | field_sig  // Static field

rvalue ::= identifier_variable DOT field_sig  // Instance field
         | identifier_variable LBRACKET identifier_variable RBRACKET  // Array index
         | field_sig  // Static field
         | LPAREN identifier_type RPAREN identifier_variable  // Cast
         | invoke_expr
         | unary_expr
         | binary_expr
         | identifier_variable INSTANCEOF identifier_type
         | identifier_variable
         | FLOAT
         | DOUBLE
         | INTEGER
         | LONG
         | STRING_LITERAL

field_sig ::= LANGLE field_ref RANGLE

field_ref ::= IDENTIFIER COLON identifier_type IDENTIFIER

unary_expr ::= (ADD_OP | SUB_OP | NOT_OP) identifier_variable

binary_expr ::= identifier_variable (LANGLE | RANGLE | CMP_OP | BIT_OP | ADD_OP | SUB_OP | MUL_OP | DIV_OP | MOD_OP) identifier_variable

// invoke method
invoke_expr ::= INVOKE_KEY (identifier_variable DOT)? invoke_method_ref LPAREN invoke_argument_list? RPAREN
              | INVOKE_KEY invoke_method_ref STRING_LITERAL invoke_method_type LBRACKET invoke_bootstrap_argument_list? RBRACKET LPAREN invoke_argument_list? RPAREN

invoke_method_type ::= LANGLE identifier_class COLON identifier_type LPAREN invoke_argument_type_list? RPAREN RANGLE

invoke_method_ref ::= LANGLE identifier_class COLON identifier_type identifier_method LPAREN invoke_argument_type_list? RPAREN RANGLE

invoke_bootstrap_argument_list ::= literal (COMMA literal)*

invoke_argument_type_list ::= identifier_type (COMMA identifier_type)*

invoke_argument_list ::= identifier_variable (COMMA identifier_variable)*
// ---

// modifiers
// https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1
modifier_class ::= PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | SEALED | NON_SEALED | STRICTFP

// https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.3.1
modifier_field ::= PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE

// https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.3
modifier_method ::= PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | SYNCHRONIZED | NATIVE | STRICTFP
// ---

// helpers
identifier_class ::= IDENTIFIER

identifier_field ::= IDENTIFIER

identifier_method ::= IDENTIFIER | LANGLE IDENTIFIER RANGLE

literal ::= INTEGER | LONG | FLOAT | DOUBLE | STRING_LITERAL

identifier_variable ::= IDENTIFIER | CONSTANT_IDENTIFIER  {
    mixin="pascal.taie.intellij.tir.syntax.TirNamedElementMixin"
    implements="pascal.taie.intellij.tir.syntax.TirNamedElement"
}

identifier_type ::= identifier_class (LBRACKET RBRACKET)* | NULL_TYPE

identifier_field_list ::= identifier_field (COMMA identifier_field)*
